{"ast":null,"code":"var _jsxFileName = \"/Users/juliendumont/Downloads/_files/marketplace/client/src/lib/hooks/useFormValidation/index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormContext = /*#__PURE__*/React.createContext();\nlet context;\nexport const useFormValidation = _ref => {\n  _s();\n\n  let {\n    formName,\n    defaultValues\n  } = _ref;\n  const [formValues, setFormValues] = React.useState({});\n  const [errors, setErrors] = React.useState({});\n  const [isDirty, setDirty] = React.useState(false);\n\n  const handleOnChange = (event, value) => {\n    var _value$toLowerCase;\n\n    setDirty(true);\n    const val = (_value$toLowerCase = value === null || value === void 0 ? void 0 : value.toLowerCase()) !== null && _value$toLowerCase !== void 0 ? _value$toLowerCase : event.target.value;\n    setFormValues(prevState => ({ ...prevState,\n      [formName]: { ...prevState[formName],\n        [event.target.name]: val\n      }\n    }));\n  };\n\n  const isValid = React.useMemo(() => {\n    var _errors$formName;\n\n    return Object.values((_errors$formName = errors[formName]) !== null && _errors$formName !== void 0 ? _errors$formName : {}).some(error => error);\n  }, [formValues, handleOnChange]);\n  React.useEffect(() => register(), []);\n\n  const register = values => {\n    const val = values !== null && values !== void 0 ? values : defaultValues;\n    Object.entries(val).forEach(_ref2 => {\n      let [key, value] = _ref2;\n      setFormValues(prevState => ({ ...defaultValues,\n        [formName]: { ...prevState[formName],\n          [key]: value\n        }\n      }));\n    });\n  };\n\n  const validate = async values => Object.entries(values).forEach(_ref3 => {\n    let [key, value] = _ref3;\n    return setErrors(prevState => ({ ...prevState,\n      [formName]: { ...prevState[formName],\n        [key]: !(value !== null && value !== void 0 && value.length)\n      }\n    }));\n  });\n\n  context = React.useMemo(() => {\n    return {\n      errors,\n      register,\n      validate,\n      handleOnChange,\n      formValues,\n      isValid: Boolean(!isValid && isDirty)\n    };\n  }, [formValues]);\n  return context;\n};\n\n_s(useFormValidation, \"8vD2abAyukZenqVrQKBB6qzCwwA=\");\n\nconst FormProvider = _ref4 => {\n  let {\n    children\n  } = _ref4;\n  return /*#__PURE__*/_jsxDEV(FormContext.Provider, {\n    value: context,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 40\n  }, this);\n};\n\n_c = FormProvider;\nexport default FormProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormProvider\");","map":{"version":3,"sources":["/Users/juliendumont/Downloads/_files/marketplace/client/src/lib/hooks/useFormValidation/index.js"],"names":["React","FormContext","createContext","context","useFormValidation","formName","defaultValues","formValues","setFormValues","useState","errors","setErrors","isDirty","setDirty","handleOnChange","event","value","val","toLowerCase","target","prevState","name","isValid","useMemo","Object","values","some","error","useEffect","register","entries","forEach","key","validate","length","Boolean","FormProvider","children"],"mappings":"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","sourcesContent":["import React from 'react';\n\nconst FormContext = React.createContext()\n\nlet context;\nexport const useFormValidation = ({ formName, defaultValues }) => { \n    const [formValues, setFormValues] = React.useState({})\n    const [errors, setErrors] = React.useState({})\n    const [isDirty, setDirty] = React.useState(false)\n\n    const handleOnChange = (event, value) => {\n        setDirty(true)\n        const val = value?.toLowerCase() ?? event.target.value\n        setFormValues(prevState => ({ ...prevState, [formName]: { ...prevState[formName], [event.target.name]: val }}))\n    }\n   \n    const isValid = React.useMemo(() => Object.values(errors[formName] ?? {}).some(error => error), [formValues, handleOnChange])\n    React.useEffect(() => register(), [])\n  \n    const register = (values) => {\n        const val = values ?? defaultValues\n        Object.entries(val)\n            .forEach(([key, value]) => { \n                setFormValues(prevState => ({ ...defaultValues, [formName]: { ...prevState[formName], [key]: value } }))\n            })  \n    }\n    const validate = async (values) => \n        Object.entries(values)\n            .forEach(([key, value]) =>\n                setErrors(prevState =>\n                    ({ ...prevState, [formName]: { ...prevState[formName], [key]: !value?.length } })))     \n                \n    context = React.useMemo(() => { \n        return {    \n            errors, \n            register,\n            validate,\n            handleOnChange, \n            formValues, \n            isValid : Boolean(!isValid && isDirty)\n        }\n    }, [formValues])\n    return context\n}\n\nconst FormProvider = ({ children }) => <FormContext.Provider value={context}>{children}</FormContext.Provider>\n\nexport default FormProvider "]},"metadata":{},"sourceType":"module"}