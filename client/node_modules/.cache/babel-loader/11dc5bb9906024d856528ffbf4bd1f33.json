{"ast":null,"code":"import { ADD_TO_CART, UPDATE_CART, REMOVE_FROM_CART, CHECKOUT, SET_DELIVERY_CHOICE } from '../actions/actionTypes';\nconst initialState = {\n  items: localStorage.getItem('items') ? JSON.parse(localStorage.getItem('items')) : [],\n  delivery: 'standard'\n};\n\nconst mapItem = (item, payload) => {\n  if (item.id === payload.product.id) {\n    return { ...item,\n      quantity: item.quantity + 1\n    };\n  }\n\n  return item;\n};\n\nconst updateMapItem = (item, payload) => {\n  if (item.id === payload.id) {\n    return { ...item,\n      quantity: payload.quantity\n    };\n  }\n\n  return item;\n};\n\nconst filterItem = (item, payload) => item.id !== payload.id;\n\nconst cart = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case ADD_TO_CART:\n      const itemFound = !!state.items.find(item => item.id === payload.product.id);\n\n      if (itemFound) {\n        return { ...state,\n          items: state.items.map(item => mapItem(item, payload))\n        };\n      }\n\n      return { ...state,\n        items: [{ ...payload.product,\n          quantity: 1\n        }, ...state.items]\n      };\n\n    case REMOVE_FROM_CART:\n      return { ...state,\n        items: state.items.filter(item => filterItem(item, payload))\n      };\n\n    case UPDATE_CART:\n      return { ...state,\n        items: state.items.map(item => updateMapItem(item, payload))\n      };\n\n    case SET_DELIVERY_CHOICE:\n      return { ...state,\n        delivery: payload.choice\n      };\n\n    case CHECKOUT:\n      return {\n        delivery: 'standard',\n        items: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cart;","map":{"version":3,"sources":["/Users/juliendumont/Downloads/_files/marketplace/client/src/lib/state/reducers/cart.js"],"names":["ADD_TO_CART","UPDATE_CART","REMOVE_FROM_CART","CHECKOUT","SET_DELIVERY_CHOICE","initialState","items","localStorage","getItem","JSON","parse","delivery","mapItem","item","payload","id","product","quantity","updateMapItem","filterItem","cart","state","type","itemFound","find","map","filter","choice"],"mappings":"AAAA,SACEA,WADF,EAEEC,WAFF,EAGEC,gBAHF,EAIEC,QAJF,EAKEC,mBALF,QAMO,wBANP;AASA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAEC,YAAY,CAACC,OAAb,CAAqB,OAArB,IAAgCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAhC,GAA4E,EADhE;AAEnBG,EAAAA,QAAQ,EAAE;AAFS,CAArB;;AAKA,MAAMC,OAAO,GAAG,CAACC,IAAD,EAAOC,OAAP,KAAmB;AACjC,MAAID,IAAI,CAACE,EAAL,KAAYD,OAAO,CAACE,OAAR,CAAgBD,EAAhC,EAAoC;AAAE,WAAO,EAAE,GAAGF,IAAL;AAAWI,MAAAA,QAAQ,EAAEJ,IAAI,CAACI,QAAL,GAAgB;AAArC,KAAP;AAAiD;;AACvF,SAAOJ,IAAP;AACD,CAHD;;AAIA,MAAMK,aAAa,GAAG,CAACL,IAAD,EAAOC,OAAP,KAAmB;AACvC,MAAID,IAAI,CAACE,EAAL,KAAYD,OAAO,CAACC,EAAxB,EAA4B;AAAE,WAAO,EAAE,GAAGF,IAAL;AAAWI,MAAAA,QAAQ,EAAEH,OAAO,CAACG;AAA7B,KAAP;AAA+C;;AAC7E,SAAOJ,IAAP;AACD,CAHD;;AAIA,MAAMM,UAAU,GAAG,CAACN,IAAD,EAAOC,OAAP,KAAmBD,IAAI,CAACE,EAAL,KAAYD,OAAO,CAACC,EAA1D;;AAEA,MAAMK,IAAI,GAAG,YAA2C;AAAA,MAA1CC,KAA0C,uEAAlChB,YAAkC;AAAA,MAApB;AAACiB,IAAAA,IAAD;AAAOR,IAAAA;AAAP,GAAoB;;AACtD,UAAQQ,IAAR;AACE,SAAKtB,WAAL;AACE,YAAMuB,SAAS,GAAG,CAAC,CAACF,KAAK,CAACf,KAAN,CAAYkB,IAAZ,CAAiBX,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAYD,OAAO,CAACE,OAAR,CAAgBD,EAArD,CAApB;;AACA,UAAIQ,SAAJ,EAAe;AAAE,eAAO,EAAE,GAAGF,KAAL;AAAYf,UAAAA,KAAK,EAAEe,KAAK,CAACf,KAAN,CAAYmB,GAAZ,CAAgBZ,IAAI,IAAID,OAAO,CAACC,IAAD,EAAOC,OAAP,CAA/B;AAAnB,SAAP;AAA4E;;AAC7F,aAAO,EAAE,GAAGO,KAAL;AAAYf,QAAAA,KAAK,EAAE,CAAC,EAAE,GAAGQ,OAAO,CAACE,OAAb;AAAsBC,UAAAA,QAAQ,EAAE;AAAhC,SAAD,EAAsC,GAAGI,KAAK,CAACf,KAA/C;AAAnB,OAAP;;AACF,SAAKJ,gBAAL;AAAuB,aAAO,EAAE,GAAGmB,KAAL;AAAYf,QAAAA,KAAK,EAAEe,KAAK,CAACf,KAAN,CAAYoB,MAAZ,CAAmBb,IAAI,IAAIM,UAAU,CAACN,IAAD,EAAOC,OAAP,CAArC;AAAnB,OAAP;;AACvB,SAAKb,WAAL;AAAkB,aAAO,EAAE,GAAGoB,KAAL;AAAYf,QAAAA,KAAK,EAAEe,KAAK,CAACf,KAAN,CAAYmB,GAAZ,CAAgBZ,IAAI,IAAIK,aAAa,CAACL,IAAD,EAAOC,OAAP,CAArC;AAAnB,OAAP;;AAClB,SAAKV,mBAAL;AAA0B,aAAO,EAAC,GAAGiB,KAAJ;AAAWV,QAAAA,QAAQ,EAAEG,OAAO,CAACa;AAA7B,OAAP;;AAC1B,SAAKxB,QAAL;AAAe,aAAO;AAACQ,QAAAA,QAAQ,EAAE,UAAX;AAAuBL,QAAAA,KAAK,EAAE;AAA9B,OAAP;;AACf;AAAS,aAAOe,KAAP;AATX;AAWD,CAZD;;AAaA,eAAeD,IAAf","sourcesContent":["import {\n  ADD_TO_CART,\n  UPDATE_CART,\n  REMOVE_FROM_CART, \n  CHECKOUT,\n  SET_DELIVERY_CHOICE\n} from '../actions/actionTypes'\n\n\nconst initialState = {\n  items: localStorage.getItem('items') ? JSON.parse(localStorage.getItem('items')) : [],\n  delivery: 'standard'\n};\n\nconst mapItem = (item, payload) => {\n  if (item.id === payload.product.id) { return { ...item, quantity: item.quantity + 1 } }\n  return item\n}\nconst updateMapItem = (item, payload) => { \n  if (item.id === payload.id) { return { ...item, quantity: payload.quantity} }\n  return item\n}\nconst filterItem = (item, payload) => item.id !== payload.id\n\nconst cart = (state = initialState, {type, payload}) => { \n  switch (type) {\n    case ADD_TO_CART:\n      const itemFound = !!state.items.find(item => item.id === payload.product.id)\n      if (itemFound) { return { ...state, items: state.items.map(item => mapItem(item, payload)) }}\n      return { ...state, items: [{ ...payload.product, quantity: 1 }, ...state.items] }\n    case REMOVE_FROM_CART: return { ...state, items: state.items.filter(item => filterItem(item, payload)) }\n    case UPDATE_CART: return { ...state, items: state.items.map(item => updateMapItem(item, payload))}\n    case SET_DELIVERY_CHOICE: return {...state, delivery: payload.choice}\n    case CHECKOUT: return {delivery: 'standard', items: []}\n    default: return state;\n  } \n}\nexport default cart"]},"metadata":{},"sourceType":"module"}